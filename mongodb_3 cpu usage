# Understanding SELinux Denial and Fixing MongoDB Access Issues

## **1. Why This Happens**
MongoDB (`mongod`) is trying to access `/proc/fs`, but SELinux is blocking it due to security policies.
This is usually caused by MongoDB‚Äôs **Full-Time Diagnostic Data Capture (FTDC)**, which collects system metrics.

---

## **2. How to Analyze the SELinux Denial Logs**
Run the following command to check recent SELinux denials:
sudo ausearch -m AVC,USER_AVC -ts recent | tail -n 20

markdown
Copy
Edit
### **Understanding the Output:**
Example Log:
type=AVC msg=audit(1740481367.000:7294536): avc: denied { search } for
pid=5836 comm="ftdc" name="fs" dev="proc" ino=12411 scontext=system_u:system_r:mongod_t:s0 tcontext=system_u:object_r:sysctl_fs_t:s0 tclass=dir permissive=0

markdown
Copy
Edit
#### **Breaking It Down:**
- `pid=5836` ‚Üí The **process ID** of MongoDB.
- `comm="ftdc"` ‚Üí The **subprocess** causing the issue (MongoDB‚Äôs FTDC).
- `name="fs" dev="proc"` ‚Üí It tried to access `/proc/fs`, but was denied.
- `scontext=system_u:system_r:mongod_t:s0` ‚Üí MongoDB is running in `mongod_t` security context.
- `tcontext=system_u:object_r:sysctl_fs_t:s0` ‚Üí The target is **protected by SELinux**.
- `tclass=dir permissive=0` ‚Üí **SELinux is enforcing the rule**, not just logging it.

---

## **3. How to Fix It**
### ‚úÖ **Option 1: Allow MongoDB to Access `/proc/fs` (Recommended)**
Create a new SELinux policy to permit access:

#### **Step 1: Generate a Policy**
sudo ausearch -m AVC,USER_AVC -ts recent | audit2allow -M my_mongo_policy

ruby
Copy
Edit
**What this does:**  
- **`ausearch -m AVC,USER_AVC -ts recent`** ‚Üí Finds recent SELinux denials.  
- **`audit2allow -M my_mongo_policy`** ‚Üí Converts the denials into an **SELinux policy module**.

#### **Step 2: Apply the Policy**
sudo semodule -i my_mongo_policy.pp

yaml
Copy
Edit
**What this does:**  
- **`semodule -i`** ‚Üí Installs the policy module, allowing MongoDB to access `/proc/fs`.

---

### üö® **Option 2: Put SELinux in Permissive Mode for `mongod` (Testing Only)**
If you want to **test** without blocking MongoDB but still log denials:
sudo semanage permissive -a mongod_t

markdown
Copy
Edit
**What this does:**  
- **`semanage permissive -a mongod_t`** ‚Üí Puts `mongod_t` in **permissive mode** (logs denials but doesn't enforce them).

#### **To Revert Back to Enforcing Mode**
sudo semanage permissive -d mongod_t

yaml
Copy
Edit

---

### ‚õî **Option 3: Disable SELinux (Not Recommended)**
If you want to **completely disable** SELinux (‚ö†Ô∏è security risk):
#### **Temporarily Disable (Until Reboot)**
sudo setenforce 0

markdown
Copy
Edit
#### **Permanently Disable SELinux**
sudo nano /etc/selinux/config

makefile
Copy
Edit
Change:
SELINUX=enforcing

css
Copy
Edit
To:
SELINUX=disabled

markdown
Copy
Edit

Then, **reboot** the system:
sudo reboot

yaml
Copy
Edit

‚ö†Ô∏è **Warning:** Disabling SELinux **removes an important security layer**. Only do this if absolutely necessary!

---

## **4. What Should You Do?**
- ‚úÖ **If MongoDB is failing**, use **Option 1 (audit2allow)** to create a policy.  
- üõ†Ô∏è **If you want to test first**, use **Option 2 (permissive mode)**.  
- ‚õî **Avoid disabling SELinux unless necessary!**  

---
üí° **Need help?** Run the following and share the output:
sudo ausearch -m AVC,USER_AVC -ts recent | tail -n 20

pgsql
Copy
Edit

üöÄ **This guide ensures your MongoDB works while keeping SELinux security intact!**
